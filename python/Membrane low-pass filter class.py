get_ipython().run_cell_magic('file', 'membrane_lowpass_md.py', "\nimport numpy\n\nclass membrane_lowpass(object):\n    \n    def __init__(self, Number_of_Neurons, tau):\n        '''\n        Initializes the neuron membranes.\n        Number_of_Neurons: total number of neurons to be simulated\n        tau: time constant (in seconds)\n        '''\n        self.neurons = numpy.zeros(Number_of_Neurons)\n        self.times = numpy.zeros(Number_of_Neurons)\n        self.tau = tau\n    \n    def process_spikes(self, spikes, current_time):\n        '''\n        Processes the received spikes at the current time updating their membrane values.\n        spikes: list with the indexes of the neurons who spiked.\n        current_time: the time the neurons spiked (float)\n        '''\n        delta_t = current_time-self.times[spikes] # Calculates the difference between the last time they spiked\n        current_values = self.neurons[spikes]*numpy.exp(-delta_t/self.tau) # Calculates the current values\n        self.times[spikes]=numpy.ones(len(spikes))*current_time # Updates the last time they spiked\n        self.neurons[spikes] = current_values + numpy.ones(len(spikes)) # Updates the neuron membrane values\n\n    def check_values(self, current_time):\n        '''\n        Returns the current membrane values at the specified time.\n        current_time: time used to calculate the membrane values.\n        '''\n        delta_t = current_time-self.times # Calculates the time since last spike\n        return self.neurons*numpy.exp(-delta_t/self.tau) # Calculates the current values\n        ")



