from catalyst.api import order, record, symbol
get_ipython().magic('matplotlib inline')

get_ipython().system('catalyst ingest-exchange -x bitfinex -i btc_usd -f minute')

# Register the catalyst magic
get_ipython().magic('load_ext catalyst')

get_ipython().run_cell_magic('catalyst', '--start 2015-3-1 --end 2017-6-28 --capital-base 100000 -x bitfinex -c usd', "\nfrom catalyst.finance.slippage import VolumeShareSlippage\n\nfrom catalyst.api import (\n    order_target_value,\n    symbol,\n    record,\n    cancel_order,\n    get_open_orders,\n)\n\ndef initialize(context):\n    context.ASSET_NAME = 'btc_usd'\n    context.TARGET_HODL_RATIO = 0.8\n    context.RESERVE_RATIO = 1.0 - context.TARGET_HODL_RATIO\n\n    # For all trading pairs in the poloniex bundle, the default denomination\n    # currently supported by Catalyst is 1/1000th of a full coin. Use this\n    # constant to scale the price of up to that of a full coin if desired.\n    context.TICK_SIZE = 1000.0\n\n    context.is_buying = True\n    context.asset = symbol(context.ASSET_NAME)\n\n    context.i = 0\n\ndef handle_data(context, data):\n    context.i += 1\n\n    starting_cash = context.portfolio.starting_cash\n    target_hodl_value = context.TARGET_HODL_RATIO * starting_cash\n    reserve_value = context.RESERVE_RATIO * starting_cash\n\n    # Cancel any outstanding orders\n    orders = get_open_orders(context.asset) or []\n    for order in orders:\n        cancel_order(order)\n    \n    # Stop buying after passing the reserve threshold\n    cash = context.portfolio.cash\n    if cash <= reserve_value:\n        context.is_buying = False\n\n    # Retrieve current asset price from pricing data\n    price = data.current(context.asset,'price')\n\n    # Check if still buying and could (approximately) afford another purchase\n    if context.is_buying and cash > price:\n        # Place order to make position in asset equal to target_hodl_value\n        order_target_value(\n            context.asset,\n            target_hodl_value,\n            limit_price=price*1.1,\n        )\n\n    record(\n        price=price,\n        volume=data.current(context.asset,'volume'),\n        cash=cash,\n        starting_cash=context.portfolio.starting_cash,\n        leverage=context.account.leverage,\n    )\n\ndef analyze(context=None, results=None):\n    import matplotlib.pyplot as plt\n\n    # Plot the portfolio and asset data.\n    ax1 = plt.subplot(611)\n    results[['portfolio_value']].plot(ax=ax1)\n    ax1.set_ylabel('Portfolio Value (USD)')\n\n    ax2 = plt.subplot(612, sharex=ax1)\n    ax2.set_ylabel('{asset} (USD)'.format(asset=context.ASSET_NAME))\n    (context.TICK_SIZE * results[['price']]).plot(ax=ax2)\n\n    trans = results.ix[[t != [] for t in results.transactions]]\n    buys = trans.ix[\n        [t[0]['amount'] > 0 for t in trans.transactions]\n    ]\n    ax2.plot(\n        buys.index,\n        context.TICK_SIZE * results.price[buys.index],\n        '^',\n        markersize=10,\n        color='g',\n    )\n\n    ax3 = plt.subplot(613, sharex=ax1)\n    results[['leverage', 'alpha', 'beta']].plot(ax=ax3)\n    ax3.set_ylabel('Leverage ')\n\n    ax4 = plt.subplot(614, sharex=ax1)\n    results[['starting_cash', 'cash']].plot(ax=ax4)\n    ax4.set_ylabel('Cash (USD)')\n\n    results[[\n        'treasury',\n        'algorithm',\n        'benchmark',\n    ]] = results[[\n        'treasury_period_return',\n        'algorithm_period_return',\n        'benchmark_period_return',\n    ]]\n\n    ax5 = plt.subplot(615, sharex=ax1)\n    results[[\n        'treasury',\n        'algorithm',\n        'benchmark',\n    ]].plot(ax=ax5)\n    ax5.set_ylabel('Percent Change')\n\n    ax6 = plt.subplot(616, sharex=ax1)\n    results[['volume']].plot(ax=ax6)\n    ax6.set_ylabel('Volume (mCoins/5min)')\n\n    plt.legend(loc=3)\n\n    # Show the plot.\n    plt.gcf().set_size_inches(18, 8)\n    plt.show()")



