from jupyter_client.kernelspec import KernelSpecManager

def get_kernelspec(name):
    """Get a kernel specification dictionary given a kernel name
    
    This is optional, but required for execution of a new notebook.
    """
    ksm = KernelSpecManager()
    kernelspec = ksm.get_kernel_spec(name).to_dict()
    kernelspec['name'] = name
    kernelspec.pop('argv')
    return kernelspec

import os
import nbformat
from nbformat.v4.nbbase import new_markdown_cell, new_code_cell, new_notebook
from nbconvert.preprocessors import ExecutePreprocessor


def create_notebook(nbfilename,
                    kernel='python3',
                    execute=False):
    # Cells is a Python list of cell objects
    cells = []
    
    # Here's a markdown cell
    cells.append(new_markdown_cell(source=('# Simple Auto-Generated Notebook\n'
                                           'This notebook was programatically '
                                           'generated and executed by '
                                           '[CreateNotebook.ipynb](CreateNotebook.ipynb)')))

    # Here are some code cells:
    cells.append(new_code_cell(
        source='print("hello world")',
    ))

    cells.append(new_code_cell(
        source='\n'.join(['%matplotlib inline',
                          'import numpy as np',
                          'import matplotlib.pyplot as plt',
                          'plt.style.use("ggplot")']),
    ))

    cells.append(new_code_cell(
        source='\n'.join(['np.random.seed(0)',
                          'plt.plot(np.random.rand(100))'])
    ))

    # Now we set-up the metadata & create a new notebook
    kernelspec = get_kernelspec(kernel)
    notebook = new_notebook(cells=cells,
                            metadata={'language': 'python',
                                      'kernelspec': kernelspec})

    # If desired, we can execute the notebook as well:
    if execute:
        ep = ExecutePreprocessor(timeout=600)
        ep.preprocess(notebook, {'metadata': {'path': os.path.dirname(nbfilename)}})

    # Finally, write the (executed) notebook to the file:
    nbformat.write(notebook, nbfilename)

create_notebook('autogenerated.ipynb', kernel='python3', execute=True)

