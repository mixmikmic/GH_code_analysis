get_ipython().run_cell_magic('script', 'glpsol -m /dev/stdin ', '\n# Traveling Salesman Problem with Time Windows\n\nparam start symbolic;\nparam finish symbolic, != start;\nparam maxspeed > 0;\nparam minspeed > 0, <= maxspeed;\n\nset PLACES;\nparam lat{PLACES};\nparam lng{PLACES};\nparam S1{PLACES};\nparam S2{p in PLACES} >= S1[p];\n\n# compute great circle distances and minimum travel times\nparam d2r := 3.1415926/180;\nparam alpha{a in PLACES, b in PLACES} := sin(d2r*(lat[a]-lat[b])/2)**2 \n      + cos(d2r*lat[a])*cos(d2r*lat[b])*sin(d2r*(lng[a]-lng[b])/2)**2;\nparam gcdist{a in PLACES, b in PLACES} := 2*6371*atan(sqrt(alpha[a,b]),sqrt(1-alpha[a,b]));\n\n# Path constraints\nvar x{PLACES, PLACES} binary;\n\n# must leave from all nodes except the finish node\ns.t. lv1 {a in PLACES : a != finish}: sum{b in PLACES} x[a,b] = 1;\ns.t. lv2 : sum{b in PLACES} x[finish,b] = 0;\n\n# must arrive at all places except the start node\ns.t. ar1 {a in PLACES : a != start}: sum{b in PLACES} x[b,a] = 1;\ns.t. ar2 : sum{b in PLACES} x[b,start] = 0;\n\n# subtour elimination using an idea from Andrew O. Makhorin\nvar y{PLACES, PLACES} >= 0, integer;\ns.t. capbnd {a in PLACES, b in PLACES} : y[a,b] <= (card(PLACES)-1)*x[a,b];\ns.t. capcon {a in PLACES} : sum{b in PLACES} y[b,a] \n         + (if a=start then card(PLACES)) = 1 + sum{b in PLACES} y[a,b];\n\n# Time Constraints\nparam bigM := 50;\nvar tar{PLACES};         # arrival\nvar tlv{PLACES};         # departure\nvar tea{PLACES} >= 0;    # early arrival (arrival before the designated time window)\nvar tla{PLACES} >= 0;    # late arrival (arrival after the designated time window)\nvar ted{PLACES} >= 0;    # early departure (departure before the designated time window)\nvar tld{PLACES} >= 0;    # late departure (departure after the designated time window)\n\ns.t. t0 {a in PLACES} : tlv[a] >= tar[a]; \ns.t. t1 {a in PLACES, b in PLACES} : \n        tar[b] >= tlv[a] + gcdist[a,b]/maxspeed - bigM*(1-x[a,b]);\ns.t. t2 {a in PLACES, b in PLACES} : \n        tar[b] <= tlv[a] + gcdist[a,b]/minspeed + bigM*(1-x[a,b]);\ns.t. t3 {a in PLACES : a != start } : tea[a] >= S1[a] - tar[a];   # early arrival\ns.t. t4 {a in PLACES : a != start } : tla[a] >= tar[a] - S2[a];   # late arrival\ns.t. t5 {a in PLACES : a != finish} : ted[a] >= S1[a] - tlv[a];   # early departure\ns.t. t6 {a in PLACES : a != finish} : tld[a] >= tlv[a] - S2[a];   # late departure\n\n# the objective is weighted sum of average and maximum time window excursions\nvar tmax >= 0;\ns.t. o1 {a in PLACES} : tea[a] <= tmax;\ns.t. o2 {a in PLACES} : tla[a] <= tmax;\ns.t. o3 {a in PLACES} : ted[a] <= tmax;\ns.t. o4 {a in PLACES} : tld[a] <= tmax;\n\nminimize obj: sum{a in PLACES} (1*tea[a] + 2*tla[a] + 2*ted[a] + 1*tld[a]) + 2*tmax;\n\nsolve;\n\nprintf "%6s  %3s   %6s  %3s %6s %6s %6s %6s %7s %5s %6s\\n", \n    \'Depart\',\'\',\'Arrive\',\'\',\'EDep\',\'LDep\',\'EArr\',\'LArr\',\'Dist\',\'Time\',\'Speed\';\n\nfor {k in card(PLACES)-1..0 by -1} {\n    printf {a in PLACES, b in PLACES : (y[a,b]=k) && (x[a,b]=1)}\n        "%-3s %7.2f   %-3s %7.2f %6.2f%1s %5.2f%1s %5.2f%1s %5.2f%1s %6.1f %5.2f %6.1f\\n", \n        a, tlv[a], b, tar[b], \n        ted[a], if (ted[a]>0) then \'*\' else \' \',\n        tld[a], if (tld[a]>0) then \'*\' else \' \',\n        tea[b], if (tea[b]>0) then \'*\' else \' \',\n        tla[b], if (tla[b]>0) then \'*\' else \' \',\n        gcdist[a,b], (tar[b]-tlv[a]), gcdist[a,b]/(tar[b]-tlv[a]);\n}\n\ndata;\n\nparam start := \'ATL\';\nparam finish := \'ORD\';\nparam maxspeed := 800;\nparam minspeed := 600;\n\nparam : PLACES :         lat            lng       S1       S2 :=\n        ATL       33.6366995    -84.4278639      8.0     24.0\n        BOS       42.3629722    -71.0064167      8.0      9.0\n        DEN       39.8616667   -104.6731667     12.0     15.0\n        DFW       32.8968281    -97.0379958     12.0     13.0\n        JFK       40.6397511    -73.7789256     18.0     20.0\n        LAX       33.9424955   -118.4080684     12.0     16.0\n        ORD       41.9816486    -87.9066714     20.0     24.0\n        STL       38.7486972    -90.3700289     11.0     13.0\n; \n\nend;')



