#Import needed libraries
import sqlite3
import datetime as dt
from dateutil.relativedelta import relativedelta
import csv

#Connect to database
database = "fhwa_mn.sqlite"
conn = sqlite3.connect(database)
c = conn.cursor()

#Set up timeframes
s = '2014-02-19'
start = dt.datetime.strptime(s, '%Y-%m-%d')
time_step = relativedelta(minutes=10)

get_ipython().run_cell_magic('time', '', '#Add indexes to the tables used in downsampling\n\n#Update Table Indexes\nc.execute(\'CREATE INDEX update_vname_index ON "update" (VehicleName);\')\nc.execute(\'CREATE INDEX update_tstamp_index ON "update" (TimeStamp);\')\nc.execute(\'CREATE INDEX update_gps_index ON "update" (GPS_Quality);\')\n\n#Weather Table Indexes\nc.execute(\'CREATE INDEX weater_stationID_index ON "weather" (StationID);\')\nc.execute(\'CREATE INDEX weater_obsType_index ON "weather" (ObsTypeName);\')\nc.execute(\'CREATE INDEX weater_tstamp_index ON "weather" (TimeStamp);\')\n\n#Mdtx Table Indexes\nc.execute(\'CREATE INDEX mdtx_vname_index ON "mdtx" (VehicleName);\')\nc.execute(\'CREATE INDEX mdtx_tstamp_index ON "mdtx" (TimeStamp);\')\nc.execute(\'CREATE INDEX mdtx_gps_index ON "mdtx" (GPS_Quality);\')\n\n#Vaix Table Indexes\nc.execute(\'CREATE INDEX vaix_vname_index ON "vaix" (VehicleName);\')\nc.execute(\'CREATE INDEX vaix_tstamp_index ON "vaix" (TimeStamp);\')\nc.execute(\'CREATE INDEX vaix_gps_index ON "vaix" (GPS_Quality);\')')

get_ipython().run_cell_magic('time', '', '#The data has light vehicles, lets remove these\nnot_plow = ["204360","204362","206031","207301","209118","209134","209217","210161","210333","210335" \\\n            ,"211277","211548","212291","212312","212457","212458","213128","Jakin","Joe"]\n\n#Find list of vehicle names from update table\nc.execute(\'SELECT DISTINCT VehicleName FROM "update" WHERE VehicleName NOT IN (\'+\', \'.join([\'"{}"\'.format(value) for value in not_plow])+\')\')\nr = c.fetchall()\nupdate_vehicles = [x[0] for x in r]\n\n#Find list of weather nodes from weather table\nc.execute(\'SELECT DISTINCT StationID FROM weather\')\nr = c.fetchall()\nweather_nodes = [x[0] for x in r]\n\n#Find list of vehicle names from mdtx table\nc.execute(\'SELECT DISTINCT VehicleName FROM mdtx WHERE VehicleName NOT IN (\'+\', \'.join([\'"{}"\'.format(value) for value in not_plow])+\')\')\nr = c.fetchall()\nmdtx_vehicles = [x[0] for x in r]\n\n#Find list of vehicle names from vaix table\nc.execute(\'SELECT DISTINCT VehicleName FROM vaix WHERE VehicleName NOT IN (\'+\', \'.join([\'"{}"\'.format(value) for value in not_plow])+\')\')\nr = c.fetchall()\nvaix_vehicles = [x[0] for x in r]')

get_ipython().run_cell_magic('time', '', 'ObsType = [\'precipIntensity\', \'essSurfaceStatus\']\n\n#Select all the weather data from the database\ncommand = """\nSELECT StationID, ObsTypeName, strftime(\'%%Y%%m%%d%%H0\', Timestamp) + strftime(\'%%M\', Timestamp)/10,\n  Latitude, Longitude, Observation\nFROM weather\nWHERE Timestamp >= ? AND Timestamp <= ? AND StationID IN (\'%s\') AND ObsTypeName IN (\'%s\') \nGROUP BY StationID, ObsTypeName, strftime(\'%%Y%%m%%d%%H0\', Timestamp) + strftime(\'%%M\', Timestamp)/10,\n  Latitude, Longitude\nHAVING MIN(ROWID)\nORDER BY StationID, ObsTypeName DESC, Timestamp ASC;\n""" % (("\', \'".join(str(w) for w in weather_nodes)), "\', \'".join(ObsType))\n\n#Write the selected data to a .csv file\nheaders=[\'StationID\', \'ObsTypeName\', \'Timestamp\', \'Latitude\', \'Longitude\', \'Observation\']\nwith open(\'data/weather_data.csv\', \'w\') as f:\n    writer = csv.writer(f)\n    writer.writerow(headers)\n    c.execute(command, (start, start+time_step*578))\n    for row in c.fetchall():\n        # Fix the timestamp format\n        timestamp = dt.datetime.strptime(str(row[2]), \'%Y%m%d%H%M\')\n        # We rounded to 10 minute intervals\n        timestamp = timestamp.replace(minute=timestamp.minute*10)\n        output_row = (row[0], row[1], timestamp.strftime("%Y-%m-%d %H:%M:%S.%f"), row[3], row[4], row[5])\n        writer.writerow(output_row)')

get_ipython().run_cell_magic('time', '', '#Select all the data from the update table\ncommand = """\nSELECT VehicleName, strftime(\'%%Y%%m%%d%%H0\', Timestamp) + strftime(\'%%M\', Timestamp)/10 AS Timestamp, Latitude,\n  Longitude\nFROM \'update\'\nWHERE Timestamp >= ? AND Timestamp <= ? AND GPS_Quality != 0 AND VehicleName IN (\'%s\')\nGROUP BY VehicleName, strftime(\'%%Y%%m%%d%%H0\', Timestamp) + strftime(\'%%M\', Timestamp)/10\nHAVING MIN(ROWID)\nORDER BY VehicleName, Timestamp ASC;\n""" % "\', \'".join(update_vehicles)\n\n#Write the selected data to a .csv file\nheaders=[\'VehicleName\', \'Timestamp\', \'Latitude\', \'Longitude\']\nwith open(\'data/vehicle_data.csv\', \'w\') as f:\n    writer = csv.writer(f)\n    writer.writerow(headers)\n    c.execute(command, (start, start+time_step*578))\n    for row in c.fetchall():\n        # Fix the timestamp format\n        timestamp = dt.datetime.strptime(str(row[1]), \'%Y%m%d%H%M\')\n        # We rounded to 10 minute intervals\n        timestamp = timestamp.replace(minute=timestamp.minute*10)\n        output_row = (row[0], timestamp.strftime("%Y-%m-%d %H:%M:%S.%f"), row[2], row[3])\n        writer.writerow(output_row)')

get_ipython().run_cell_magic('time', '', '#Select all the data from the mdtx table\ncommand = """\nSELECT VehicleName, Timestamp, Latitude, Longitude, RoadCondition\nFROM \'mdtx\' \nWHERE VehicleName = ? AND Timestamp >= ? AND Timestamp <= ? AND GPS_Quality != 0\nORDER BY Timestamp ASC\nLIMIT 1\n"""\nall_mdtx_lists = []\n#For every vehicle\nfor v in mdtx_vehicles:\n    my_mdtx_list = []\n    #For every 10min interval\n    for i in range(577):\n        s = start + time_step*i\n        e = start + time_step*(i+1)\n        c.execute(command, (v, s, e))\n        r = c.fetchone()\n        if r is not None:\n            my_mdtx_list.append(r)\n    all_mdtx_lists.append(my_mdtx_list)\n    \n#Write the selected data to a .csv file\nheaders=[\'VehicleName\', \'Timestamp\', \'Latitude\', \'Longitude\', \'RoadCondition\']\nwith open(\'data/mdtx_data.csv\', \'w\') as f:\n    writer = csv.writer(f)\n    writer.writerow(headers)\n    for l in all_mdtx_lists:\n        for row in l:\n            writer.writerow(row)')

get_ipython().run_cell_magic('time', '', '#Select all the data from the vaix table\ncommand = """\nSELECT VehicleName, Timestamp, Latitude, Longitude, RoadTemp\nFROM \'vaix\' \nWHERE VehicleName = ? AND Timestamp >= ? AND Timestamp <= ? AND GPS_Quality != 0\nORDER BY Timestamp ASC\nLIMIT 1\n"""\nall_vaix_lists = []\n#For every vehicle\nfor v in vaix_vehicles:\n    my_vaix_list = []\n    #For every 10min interval\n    for i in range(577):\n        s = start + time_step*i\n        e = start + time_step*(i+1)\n        c.execute(command, (v, s, e))\n        r = c.fetchone()\n        if r is not None:\n            my_vaix_list.append(r)\n    all_vaix_lists.append(my_vaix_list)\n    \n#Write the selected data to a .csv file\nheaders=[\'VehicleName\', \'Timestamp\', \'Latitude\', \'Longitude\', \'RoadTemp\']\nwith open(\'data/vaix_data.csv\', \'w\') as f:\n    writer = csv.writer(f)\n    writer.writerow(headers)\n    for l in all_vaix_lists:\n        for row in l:\n            writer.writerow(row)')

