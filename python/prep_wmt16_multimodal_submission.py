import os
import codecs

BASEDIR='/media/1tb_drive/multilingual-multimodal/flickr30k/train/processed'

test_sens = ['this is a test', 'this is another test']
test_img_ids = ['img1', 'img2']

# submission_dir = os.path.join(BASEDIR, 'final_submissions/test_submission')

# SUBMISSION 1 -- NMT min-risk baseline
submission_dir = '/media/1tb_drive/Dropbox/projects/wmt_multimodal_2016/final_submission/'

# test_output_file = '/media/1tb_drive/Dropbox/projects/wmt_multimodal_2016/final_submission/test.min-risk-NMT-baseline.hyps.out'
test_output_file = '/media/1tb_drive/Dropbox/projects/wmt_multimodal_2016/final_submission/test.multimodal-FULL-DEV-TEST-summed.hyps.out'

# test_output_file = os.path.join(submission_dir, 'test.multimodal-summed.hyps.out')

image_id_file='/media/1tb_drive/multilingual-multimodal/flickr30k/img_features/f30k-translational/test_images.txt'

INSTITUTION_NAME = 'DCU'
TASK_NAME = '1'
METHOD_NAME = 'min-risk-multimodal'
TYPE = 'C'

submission_file_name = '{}_{}_{}_{}'.format(INSTITUTION_NAME, TASK_NAME, METHOD_NAME, TYPE)
output_file = os.path.join(submission_dir, submission_file_name)

def parse_img_ids(img_filename):
    with codecs.open(img_filename, encoding='utf8') as inp:
        img_ids = inp.read().strip().split('\n')
    
    # remove the .jpg
    img_ids = [img_id[:-4] for img_id in img_ids]
    return img_ids



def process_file_for_wmt16(input_filename, input_img_filename, split_tabs=False):
    with codecs.open(input_filename, encoding='utf8') as inp:
        lines = inp.read().strip().split('\n')
        if split_tabs:
            lines = [l.split('\t')[0] for l in lines]
        
    img_ids = parse_img_ids(input_img_filename)
    
    print(len(img_ids))
    print(len(lines))
    assert len(img_ids) == len(lines) 
        
    output_lines = ['\t'.join([METHOD_NAME, img_id, hyp, TASK_NAME, TYPE]) 
                    for img_id, hyp in zip(img_ids, lines)]
    
    return output_lines
    
#     <METHOD NAME> <IMAGE ID> <DESCRIPTION> <TASK> <TYPE>

# Where:
# METHOD NAME is the name of your method.
# IMAGE ID is the identifier of the test image.
# DESCRIPTION is the output generated by your system (either a translation or an independently generated description).
# TASK is one of the following flags: 1 (for translation task), 2 (for image description task), 3 (for both). 
# The choice here will indicate how your descriptions will be evaluated. 
# Option 3 means they will be evaluated both as a translation task and as an image description task.
# TYPE is either C or U, where C indicates "constrained", i.e. using only the resources 
# provided by the task organisers, and U indicates "unconstrained".
# Each field should be delimited by a single tab character.

out_lines = process_file_for_wmt16(test_output_file, image_id_file, split_tabs=True)

with codecs.open(output_file, 'w', encoding='utf8') as out:
    for l in out_lines:
        out.write(l+'\n')
    print('Wrote output to: {}'.format(output_file))

out_lines[:10]

be = parse_img_ids(image_id_file)

be[:10]



te[:10]



