import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

class Bandit:
    def __init__(self, m, optimistic_initial_value):
        self.m = m
        self.mean = optimistic_initial_value
        self.N = 0
     
    # simulate pulling bandit arms 
    def pull(self):
        return np.random.randn() + self.m
    
    def update(self, x):
        self.N += 1
        self.mean = (1 - 1.0/self.N) * self.mean + (1/self.N) * x

def run_experiment_epsilon(m1, m2, m3, epsilon, N):
    bandits = [Bandit(m1, 0), Bandit(m2, 0), Bandit(m3, 0)]
    data = np.empty(N)
    
    for i in range(N):
        p =  np.random.random()
        
        if p < epsilon :
            j = np.random.choice(3)
        else :
            j = np.argmax([b.mean for b in bandits])
        
        x = bandits[j].pull()
        bandits[j].update(x)
        
        # for the plot
        data[i] = x    # end of loop
    
    cumulative_average = np.cumsum(data)/(np.arange(N) + 1)
    plt.plot(cumulative_average)
    
    plt.plot(np.ones(N) * m1)
    plt.plot(np.ones(N) * m2)
    plt.plot(np.ones(N) * m3)
    plt.xscale('log')
    plt.show()
    
    for b in bandits:
        print(b.mean)
        
    return cumulative_average

def run_experiment(m1, m2, m3, N, optimistic_initial_value = 10):
    bandits = [Bandit(m1, optimistic_initial_value), Bandit(m2, optimistic_initial_value), Bandit(m3, optimistic_initial_value)]
    data = np.empty(N)
    
    for i in range(N):
        j = np.argmax([b.mean for b in bandits])
        
        x = bandits[j].pull()
        bandits[j].update(x)
        
        # for the plot
        data[i] = x    # end of loop
    
    cumulative_average = np.cumsum(data)/(np.arange(N) + 1)
    plt.plot(cumulative_average)
    
    plt.plot(np.ones(N) * m1)
    plt.plot(np.ones(N) * m2)
    plt.plot(np.ones(N) * m3)
    plt.xscale('log')
    plt.show()
    
    for b in bandits:
        print(b.mean)
        
    return cumulative_average        

if __name__ == '__main__':
    e_eps = run_experiment_epsilon(1.0, 2.0, 3.0, 0.1, 10000)
    e_oiv = run_experiment(1.0, 2.0, 3.0, 10000)

#log scale plot
plt.plot(e_eps, label='epsilon=0.1')
plt.plot(e_oiv, label='optimistic_initial_value')

plt.legend()
plt.xscale('log')
plt.show()

#linear scale
plt.plot(e_eps, label='epsilon=0.1')
plt.plot(e_oiv, label='optimistic_initial_value')

plt.legend()
plt.show()

