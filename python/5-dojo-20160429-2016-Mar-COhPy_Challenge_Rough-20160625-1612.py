import itertools
import datetime
import calendar

def find_december_monday(currentYear):
    month = 12
    dates = []

    for year in range(currentYear, 2008, -1):
        day = 1
    
        if calendar.weekday(year, month, day) == calendar.MONDAY:
            day += 7
            dates.append(str(year) + '/' + str(month) + '/' + str(day)) 
        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:
            day += 8
            dates.append(str(year) + '/' + str(month) + '/' + str(day))
        else:
            for day in range(3, 8):
                if calendar.weekday(year, month, day) == calendar.MONDAY:
                    dates.append(str(year) + '/' + str(month) + '/' + str(day))

    return dates

datetime.date.today().day

# Let's see what it outputs.
find_december_monday(datetime.date.today().year)

# First, some shell for a gut check.
# Let's see what the output of the cal command looks like.
get_ipython().system("cal 12 2016 | tr ' ' '.'")

# In the above, I see that the Mondays are the second field,
# hence the following one line shell solutions.
get_ipython().system('for year in `seq 2009 2016`;do cal 12 $year|awk "/^..  [3-9]/ {print $year, 12, \\$2}";done')
print()
# Two ways of reversing the order follow.
get_ipython().system('for year in `seq 2009 2016`;do cal 12 $year|awk "/^..  [3-9]/ {print $year, 12, \\$2}";done|tac')
print()
get_ipython().system('for year in `seq 2016 -1 2009`;do cal 12 $year|awk "/^..  [3-9]/ {print $year, 12, \\$2}";done')

# Now onto the Python gut check.
# Let's see what a Python calendar looks like.

import datetime

import calendar

DECEMBER = 12

c = calendar.TextCalendar().formatmonth(datetime.date.today().year, DECEMBER)
c = c.rstrip()
c = c.replace(' ', '.')
c.split('\n')

# From the above,
# we see that Monday is the first day of the week.
# Let's show just the interesting lines.

import datetime

import calendar

FIRST_MEETING_DATE = datetime.date(2009, 9, 28)

DECEMBER = 12

this_year = datetime.date.today().year

for year in reversed(range(FIRST_MEETING_DATE.year, this_year + 1)):
    for line in calendar.TextCalendar(
            ).formatmonth(year, DECEMBER).rstrip().split('\n'):
        if 'December' in line or 'Mo' in line:
            print(line)
        elif line[1].isdigit():
            date = int(line[:2])
            if 3 <= date <= 9:
                print(line)

# Try again, using regular expressions this time.
# This is more succinct.

import datetime
import re

import calendar

FIRST_MEETING_DATE = datetime.date(2009, 9, 28)

DECEMBER = 12

this_year = datetime.date.today().year

for year in reversed(range(FIRST_MEETING_DATE.year, this_year + 1)):
    for line in calendar.TextCalendar().formatmonth(year, DECEMBER).split('\n'):
        if re.search(r'^ [3-9]|December|Mo ', line):
            print(line)

# Get the known valid meetings dates
# and save them for later comparison.

import datetime
import re

import calendar

FIRST_MEETING_DATE = datetime.date(2009, 9, 28)

DECEMBER = 12

this_year = datetime.date.today().year

good_dates = []
for year in reversed(range(FIRST_MEETING_DATE.year, this_year + 1)):
    for line in calendar.TextCalendar().formatmonth(year, DECEMBER).split('\n'):
        m = re.search(r'^ (?P<date>[3-9])', line)
        if not m:
            continue
        date = int(m.group('date'))
        good_dates.append(datetime.date(year, DECEMBER, date))

good_dates

# From good_dates, create a list that has the same format
# as output from find_december_monday().

joe_style_good_output = [date.strftime('%Y/%-m/%-d') for date in good_dates]
joe_style_good_output

# Compare known good output to that from find_december_monday().
# We will do this each time the code is changed
# to make sure that the change does not change the output.
# This is almost test driven development (TDD).

this_year = datetime.date.today().year
assert find_december_monday(this_year) == joe_style_good_output

get_ipython().run_cell_magic('script', 'ghci', 'let dw y m d = (d + (2 * m) + ((3 * (m + 1)) `div` 5) + y + (y `div` 4) - (y `div` 100) + (y `div` 400) + 2) `mod` 7\nlet decmtg y = [3,9,8,7,6,5,4] !! (dw y 12 1)\nmap decmtg [2009..2016]')

# Give a name to 12.

import itertools
import datetime
import calendar

DECEMBER = 12

def find_december_monday(currentYear):
    month = DECEMBER
    dates = []

    for year in range(currentYear, 2008, -1):
        day = 1
    
        if calendar.weekday(year, month, day) == calendar.MONDAY:
            day += 7
            dates.append(str(year) + '/' + str(month) + '/' + str(day)) 
        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:
            day += 8
            dates.append(str(year) + '/' + str(month) + '/' + str(day))
        else:
            for day in range(3, 8):
                if calendar.weekday(year, month, day) == calendar.MONDAY:
                    dates.append(str(year) + '/' + str(month) + '/' + str(day))

    return dates

this_year = datetime.date.today().year
assert find_december_monday(this_year) == joe_style_good_output

with open('joe_style_good_output', 'w') as f:
    f.write(repr(joe_style_good_output))

# Change the assert to work with reading from file.

import itertools
import datetime
import calendar

DECEMBER = 12

def find_december_monday(currentYear):
    month = DECEMBER
    dates = []

    for year in range(currentYear, 2008, -1):
        day = 1
    
        if calendar.weekday(year, month, day) == calendar.MONDAY:
            day += 7
            dates.append(str(year) + '/' + str(month) + '/' + str(day)) 
        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:
            day += 8
            dates.append(str(year) + '/' + str(month) + '/' + str(day))
        else:
            for day in range(3, 8):
                if calendar.weekday(year, month, day) == calendar.MONDAY:
                    dates.append(str(year) + '/' + str(month) + '/' + str(day))

    return dates

this_year = datetime.date.today().year
assert (
    repr(find_december_monday(this_year)) ==
    open('joe_style_good_output').read())

get_ipython().run_cell_magic('script', 'bash', '\n# As we refactor, it would be nice to see the difference between\n# one cell and the previously executed cell.\n# This script creates a shell script that\n# does that when executed with the %%script diff_python\n# at the beginning of a cell.\n#\n# To disable the diff command,\n# Put a : and space in front of it. I.e.,\n#     : diff old.py new.py\n#\n# meld yields a beautiful diff,\n# but pops up a window for each cell executed.\n\nprogram_name="${PATH%%:*}/diff_python"\n\ncat >"$program_name" <<EOF\n#!/usr/bin/env bash\ncat >new.py\nchmod +x new.py\nif [ -a old.py ]; then\n    diff old.py new.py\nfi\npython new.py\nmv new.py old.py\nEOF\nrm old.py\nchmod +x "$program_name"')

get_ipython().run_cell_magic('script', 'diff_python', "\n# Changed 12 to 11 to deliberately make assert fail for TDD.\n\nimport itertools\nimport datetime\nimport calendar\n\ndef find_december_monday(currentYear):\n    month = 11\n    dates = []\n\n    for year in range(currentYear, 2008, -1):\n        day = 1\n    \n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += 7\n            dates.append(str(year) + '/' + str(month) + '/' + str(day)) \n        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:\n            day += 8\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        else:\n            for day in range(3, 8):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "\nimport itertools\nimport datetime\nimport calendar\n\ndef find_december_monday(currentYear):\n    month = 12\n    dates = []\n\n    for year in range(currentYear, 2008, -1):\n        day = 1\n    \n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += 7\n            dates.append(str(year) + '/' + str(month) + '/' + str(day)) \n        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:\n            day += 8\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        else:\n            for day in range(3, 8):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Give a name to 12.\n\nimport itertools\nimport datetime\nimport calendar\n\nDECEMBER = 12\n\ndef find_december_monday(currentYear):\n    month = DECEMBER\n    dates = []\n\n    for year in range(currentYear, 2008, -1):\n        day = 1\n    \n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += 7\n            dates.append(str(year) + '/' + str(month) + '/' + str(day)) \n        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:\n            day += 8\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        else:\n            for day in range(3, 8):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# PEP8:\n#     Delete trailing whitespace.\n#     Rename currentYear to last_year.\n\nimport itertools\nimport datetime\nimport calendar\n\nDECEMBER = 12\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, 2008, -1):\n        day = 1\n\n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += 7\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:\n            day += 8\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        else:\n            for day in range(3, 8):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Replace magic number 2008 with expression that has meaning.\n# 2008 was a little sneaky.\n# What one cares about is the year of the first meeting,\n# which happens to be 2009, not 2008.\n# The descending range needs a number that is one less than the last desired value.\n# If one changed the year of the first meeting from 2009 to something else,\n# how would one know to look for 2008?\n# That is part of the perniciousness of magic numbers.\n# We declare the first meeting date simply and directly,\n# and calculate the preceding year from it.\n# This way if first meeting date is changed,\n# the loop automatically stops at the correct year.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nDECEMBER = 12\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        day = 1\n\n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += 7\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:\n            day += 8\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        else:\n            for day in range(3, 8):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Replace magic number 7 with DAYS_PER_WEEK.\n# Also replace nastier magic number 8 with DAYS_PER_WEEK + 1.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        day = 1\n\n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += DAYS_PER_WEEK\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:\n            day += DAYS_PER_WEEK + 1\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        else:\n            for day in range(3, 8):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Replace magic numbers in range(3, 8).\n# Most of the work was in figuring out the expression\n# to replace 8 with.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        day = 1\n\n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += DAYS_PER_WEEK\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        elif calendar.weekday(year, month, day + 1) == calendar.MONDAY:\n            day += DAYS_PER_WEEK + 1\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n        else:\n            for day in range(\n                    EARLIEST_VALID_DECEMBER_DATE,\n                    EARLIEST_VALID_DECEMBER_DATE +\n                    DAYS_PER_WEEK -\n                    N_INVALID_DECEMBER_MEETING_DAYS):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Rework elif section to be more similar to if section.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        day = 1\n\n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += DAYS_PER_WEEK\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n            continue\n        day += 1\n        if calendar.weekday(year, month, day) == calendar.MONDAY:\n            day += DAYS_PER_WEEK\n            dates.append(str(year) + '/' + str(month) + '/' + str(day))\n            continue\n\n        for day in range(\n                EARLIEST_VALID_DECEMBER_DATE,\n                EARLIEST_VALID_DECEMBER_DATE +\n                DAYS_PER_WEEK -\n                N_INVALID_DECEMBER_MEETING_DAYS):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# The first two if sections above are identical,\n# so combine them into a loop.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        for day in range(1, N_INVALID_DECEMBER_MEETING_DAYS + 1):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                day += DAYS_PER_WEEK\n                dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                break\n        else:\n            for day in range(\n                    EARLIEST_VALID_DECEMBER_DATE,\n                    EARLIEST_VALID_DECEMBER_DATE +\n                    DAYS_PER_WEEK -\n                    N_INVALID_DECEMBER_MEETING_DAYS):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Instead of iterating over invalid days, then jumping ahead a week,\n# directly iterate over the valid days\n# that happen a week later than the invalid days.\n# Although this is an improvement by itself,\n# even better are further improvements in later cells\n# that this change enables.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        for day in range(\n                1 + DAYS_PER_WEEK,\n                N_INVALID_DECEMBER_MEETING_DAYS + 1 + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                break\n        else:\n            for day in range(\n                    EARLIEST_VALID_DECEMBER_DATE,\n                    EARLIEST_VALID_DECEMBER_DATE +\n                    DAYS_PER_WEEK -\n                    N_INVALID_DECEMBER_MEETING_DAYS):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Now we add a minor optimization to the last loop\n# to quit when it finds a match.\n# Although this is a valid optimization all by itself,\n# it was also done to make the bodies\n# of the two inner for loops identical.\n# That is a setup for another improvement a couple cells later.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        for day in range(\n                1 + DAYS_PER_WEEK,\n                N_INVALID_DECEMBER_MEETING_DAYS + 1 + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                break\n        else:\n            for day in range(\n                    EARLIEST_VALID_DECEMBER_DATE,\n                    EARLIEST_VALID_DECEMBER_DATE +\n                    DAYS_PER_WEEK -\n                    N_INVALID_DECEMBER_MEETING_DAYS):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                    break\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# The last argument to the last range() above is complicated.\n#\n#     EARLIEST_VALID_DECEMBER_DATE +\n#     DAYS_PER_WEEK -\n#     N_INVALID_DECEMBER_MEETING_DAYS\n#\n# Let's simplify it.\n# First replace EARLIEST_VALID_DECEMBER_DATE with its definition.\n#\n#     (N_INVALID_DECEMBER_MEETING_DAYS + 1) +\n#     DAYS_PER_WEEK -\n#     N_INVALID_DECEMBER_MEETING_DAYS\n#\n# The N_INVALID_DECEMBER_MEETING_DAYS terms cancel each other out,\n# leaving a much simpler expression.\n#\n#     DAYS_PER_WEEK + 1\n#\n# Why did I not think of that earlier?\n# That's how refactoring goes.\n# It is iterative.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        for day in range(\n                1 + DAYS_PER_WEEK,\n                N_INVALID_DECEMBER_MEETING_DAYS + 1 + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                break\n        else:\n            for day in range(EARLIEST_VALID_DECEMBER_DATE, DAYS_PER_WEEK + 1):\n                if calendar.weekday(year, month, day) == calendar.MONDAY:\n                    dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                    break\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# The inner for loops have the same body,\n# and their ranges are adjacent without overlapping,\n# so combine the two inner loops into one loop.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        for day in range(\n                EARLIEST_VALID_DECEMBER_DATE,\n                N_INVALID_DECEMBER_MEETING_DAYS + 1 + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                break\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# We make the inner range slightly less ugly,\n# replacing N_INVALID_DECEMBER_MEETING_DAYS + 1\n# with EARLIEST_VALID_DECEMBER_DATE.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(last_year, FIRST_MEETING_DATE.year - 1, -1):\n        for day in range(\n                EARLIEST_VALID_DECEMBER_DATE,\n                EARLIEST_VALID_DECEMBER_DATE + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                break\n\n    return dates\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Backward ranges hurt my head,\n# so go forward, then reverse result.\n\n# Why are reverse order dates desired anyway?\n# I don't know the answer to that,\n# so I maintain returning result in reverse order.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(FIRST_MEETING_DATE.year, last_year + 1):\n        for day in range(\n                EARLIEST_VALID_DECEMBER_DATE,\n                EARLIEST_VALID_DECEMBER_DATE + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                dates.append(str(year) + '/' + str(month) + '/' + str(day))\n                break\n\n    return list(reversed(dates))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Refactor date formatting.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(FIRST_MEETING_DATE.year, last_year + 1):\n        for day in range(\n                EARLIEST_VALID_DECEMBER_DATE,\n                EARLIEST_VALID_DECEMBER_DATE + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, day) == calendar.MONDAY:\n                dates.append('%s/%s/%s' % (year, month, day))\n                break\n\n    return list(reversed(dates))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Make names more consisdent: day -> date.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(FIRST_MEETING_DATE.year, last_year + 1):\n        for date in range(\n                EARLIEST_VALID_DECEMBER_DATE,\n                EARLIEST_VALID_DECEMBER_DATE + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, date) == calendar.MONDAY:\n                dates.append('%s/%s/%s' % (year, month, date))\n                break\n\n    return list(reversed(dates))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Factor out date formatting to another function.\n#\n# That way, the formatting for all find_*_monday() functions\n# can be in one place.\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(year, month, date):\n    return '%s/%s/%s' % (year, month, date)\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(FIRST_MEETING_DATE.year, last_year + 1):\n        for date in range(\n                EARLIEST_VALID_DECEMBER_DATE,\n                EARLIEST_VALID_DECEMBER_DATE + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, date) == calendar.MONDAY:\n                dates.append(year_month_date(year, month, date))\n                break\n\n    return list(reversed(dates))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Try another way of formatting year/month/date string for better readability.\n# The repetition in the argument list to .format() is ugly:\n#     year=year, month=month, date=date\n\nimport itertools\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(year, month, date):\n    return '{year}/{month}/{date}'.format(\n        year=year, month=month, date=date)\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(FIRST_MEETING_DATE.year, last_year + 1):\n        for date in range(\n                EARLIEST_VALID_DECEMBER_DATE,\n                EARLIEST_VALID_DECEMBER_DATE + DAYS_PER_WEEK):\n            if calendar.weekday(year, month, date) == calendar.MONDAY:\n                dates.append(year_month_date(year, month, date))\n                break\n\n    return list(reversed(dates))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# The inner range() above is correct and a little bit ugly.\n# Let's try replacing it with itertools.count(EARLIEST_VALID_DECEMBER_DATE).\n# The break statement which earlier was an optimization,\n# is now required.\n\nfrom itertools import count\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(year, month, date):\n    return '{year}/{month}/{date}'.format(\n        year=year, month=month, date=date)\n\ndef find_december_monday(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(FIRST_MEETING_DATE.year, last_year + 1):\n        for date in count(EARLIEST_VALID_DECEMBER_DATE):\n            if calendar.weekday(year, month, date) == calendar.MONDAY:\n                dates.append(year_month_date(year, month, date))\n                break\n\n    return list(reversed(dates))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(find_december_monday(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# If December meetings were changed to be on some other weekday,\n# the name of the function find_december_monday() would have to\n# be changed. For example, if meetings were changed to be Tuesdays,\n# the name would be changed to find_december_tuesday().\n#\n# If the meeting was not a on a particular weekday,\n# such as two days after Christmas,\n# the naming scheme of including the weekday in the function name\n# would not make sense.\n#\n# Let's choose a name that works regardless of how the meeting dates\n# are chosen. The name is the wrong place to indicate how the dates \n# are chosen.\n#\n# I choose get_december_meeting_dates().\n#\n# That name incorporates several changes.\n#\n#     find -> get\n#\n#         We don't just want to find the meeting dates,\n#         we want to get them.\n#         This is a small subtle improvement.\n#\n#     monday -> meeting_dates\n#\n#         avoids mentioning how meeting date is determined\n#\n#             Name is valid regardless of how date is determined.\n#             This was the impetus for changing the name.\n#\n#         singular to plural\n#\n#             Multiple dates are returned,\n#             so the plural name makes more sense\n#             than the singular monday.\n#\n# Why did I not realize earlier that find_december_monday(),\n# (especially the monday part) was a poor name?\n#\n# I have done this kind of stuff many times,\n# and yet chosing names is hard.\n#\n# Part of the reason is that having monday in the name was accurate;\n# December meetings _are_ on mondays.\n# But having monday in the name missed the point\n# of what the function is really about.\n#\n# One oftens paints oneself into a corner\n# without even knowing it\n# by the names one choses.\n#\n# It is so simple.\n# Yet it is subtle.\n#\n# This also applies broadly in life.\n\nfrom itertools import count\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(year, month, date):\n    return '{year}/{month}/{date}'.format(\n        year=year, month=month, date=date)\n\ndef get_december_meeting_dates(last_year):\n    month = DECEMBER\n    dates = []\n\n    for year in range(FIRST_MEETING_DATE.year, last_year + 1):\n        for date in count(EARLIEST_VALID_DECEMBER_DATE):\n            if calendar.weekday(year, month, date) == calendar.MONDAY:\n                dates.append(year_month_date(year, month, date))\n                break\n\n    return list(reversed(dates))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Let's separate getting one particular december meeting date\n# into another function.\n#\n# get_december_meeting_date() and get_december_meeting_dates()\n# each do one thing. This makes each easier to undertstand.\n#\n# break statements are a little ugly.\n# A nice side effect of separating the functions,\n# is that the break statement disappeared,\n# becoming a return statement.\n#\n# get_december_meeting_date() is pretty simple now.\n#\n# get_december_meeting_dates() is also simple now.\n#\n# I don't like the similarity in the names.\n# That makes it easy to confuse them.\n# But I have a feeling that get_december_meeting_dates\n# will be combined with other similar functions\n# eliminating the problem.\n# If that does not happen, maybe we revisit name choices.\n#\n# By the way, there is a school of thought that requires\n# that each function must have only a single return statement,\n# that it be at the bottom of the function,\n# and that it be at the top level of the function.\n# That can make the code awkward and ugly,\n# so I do not follow that school.\n\nfrom itertools import count\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(year, month, date):\n    return '{year}/{month}/{date}'.format(\n        year=year, month=month, date=date)\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    for date in count(EARLIEST_VALID_DECEMBER_DATE):\n        if calendar.weekday(year, month, date) == calendar.MONDAY:\n            return year_month_date(year, month, date)\n\ndef get_december_meeting_dates(last_year):\n    dates = []\n    for year in range(FIRST_MEETING_DATE.year, last_year + 1):\n        dates.append(get_december_meeting_date(year))\n\n    return list(reversed(dates))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# get_december_meeting_dates() is simple enough,\n# that I consider refactoring it to use a comprehension.\n# \n# This got rid of the dates variable,\n# its initialization, and slightly ugly .append()s.\n\nfrom itertools import count\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(year, month, date):\n    return '{year}/{month}/{date}'.format(\n        year=year, month=month, date=date)\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    for date in count(EARLIEST_VALID_DECEMBER_DATE):\n        if calendar.weekday(year, month, date) == calendar.MONDAY:\n            return year_month_date(year, month, date)\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Something that bugs me, is returning strings.\n# So I will work in datetime.date objects as long as I can,\n# then convert to strings at the last moment.\n#\n# The new function name, get_december_meeting_date_strings,\n# is getting long and unwieldy,\n# but each function does just one thing\n# and sure are easy to understand.\n#\n# Something I did not realize until after I did it,\n# is that if I just want datetime.date objects\n# I can use get_december_meeting_dates(),\n# ignoring get_december_meeting_date_strings().\n#\n# I like how year_month_date() now has just a single argument.\n# Unfortunately, The format arguments got even uglier.\n\nfrom itertools import count\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(date):\n    return '{year}/{month}/{date}'.format(\n        year=date.year, month=date.month, date=date.day)\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    for date in count(EARLIEST_VALID_DECEMBER_DATE):\n        if calendar.weekday(year, month, date) == calendar.MONDAY:\n            return datetime.date(year, month, date)\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\ndef get_december_meeting_date_strings(last_year):\n    return [\n        year_month_date(date)\n        for date in get_december_meeting_dates(last_year)]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_date_strings(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Let's refactor the formatting in year_month_date()\n# by trying another style of .format() syntax.\n#\n# I like this way because there is no repetition.\n#\n# Ahhh, year_month_date() looks much better now.\n\nfrom itertools import count\nimport datetime\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    for date in count(EARLIEST_VALID_DECEMBER_DATE):\n        if calendar.weekday(year, month, date) == calendar.MONDAY:\n            return datetime.date(year, month, date)\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\ndef get_december_meeting_date_strings(last_year):\n    return [\n        year_month_date(date)\n        for date in get_december_meeting_dates(last_year)]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_date_strings(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# PEP8: import order and spacing\n\nimport datetime\nfrom itertools import count\n\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef year_month_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    for date in count(EARLIEST_VALID_DECEMBER_DATE):\n        if calendar.weekday(year, month, date) == calendar.MONDAY:\n            return datetime.date(year, month, date)\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\ndef get_december_meeting_date_strings(last_year):\n    return [\n        year_month_date(date)\n        for date in get_december_meeting_dates(last_year)]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_date_strings(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Just like monday in a function name was accurate,\n# but was not a good choice,\n# year_month_date is a poor function name.\n#\n# So I changed it to format_date,\n# leaving the details of what that format is\n# to the innards of the function.\n#\n# Function names should begin with a verb.\n# \n# So another bad thing about year_month_date\n# as a function name is that it has no verb.\n# format_date begins with a verb.\n#\n# If I had several date formatting functions,\n# I might revert to names like year_month_date.\n# I might also have a variable format_date\n# to select the desired format function.\n\nimport datetime\nfrom itertools import count\n\nimport calendar\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    for date in count(EARLIEST_VALID_DECEMBER_DATE):\n        if calendar.weekday(year, month, date) == calendar.MONDAY:\n            return datetime.date(year, month, date)\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\ndef get_december_meeting_date_strings(last_year):\n    return [\n        format_date(date)\n        for date in get_december_meeting_dates(last_year)]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_date_strings(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# I refactored get_december_meeting_date().\n#\n# I got rid of the dependency on the calendar module,\n# but had to declare MONDAY myself.\n#\n# get_december_meeting_date() is a wee bit easier to read.\n\nimport datetime\nfrom itertools import count\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    for date in count(EARLIEST_VALID_DECEMBER_DATE):\n        d = datetime.date(year, month, date)\n        if d.weekday() == MONDAY:\n            return d\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\ndef get_december_meeting_date_strings(last_year):\n    return [\n        format_date(date)\n        for date in get_december_meeting_dates(last_year)]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_date_strings(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# In the cell above, count() in get_december_meeting_date()\n# only groks integers,\n# so I had to convert from integers to datetime.date objects.\n#\n# It would be nice to iterate directly with datetime.date objects,\n# skipping the conversion from integers to datetime.date objects.\n# So I make a generator that iterates through datetime objects\n# like itertools.count() does for integers.\n#\n# I stumbled into getting rid of the itertools dependency.\n#\n# get_december_meeting_date() got simpler and easier to read yet,\n# although the argument to iter_date got long.\n# iter_date() is a nice little function that might find broad use.\n#\n# Why is itertools.count() limited to iterating over integers\n# instead of iterating of anything that can handle .__add__()?\n# I will add that to my list of things to explore later.\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    for date in iter_date(datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\ndef get_december_meeting_date_strings(last_year):\n    return [\n        format_date(date)\n        for date in get_december_meeting_dates(last_year)]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_date_strings(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# In get_december_meeting_date() in the cell above,\n# the argument to iter_date() got long,\n# so I name it on a separate line.\n#\n# That made get_december_meeting_date() a little easier to read.\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    for date in iter_date(start_date):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\ndef get_december_meeting_date_strings(last_year):\n    return [\n        format_date(date)\n        for date in get_december_meeting_dates(last_year)]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_december_meeting_date_strings(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Change get_december_meeting_date_strings\n# to get_formatted_december_meeting_dates.\n#\n# That's a little bit more readable.\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    for date in iter_date(start_date):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(last_year):\n    return list(reversed([\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)]))\n\ndef get_formatted_december_meeting_dates(last_year):\n    return [\n        format_date(date)\n        for date in get_december_meeting_dates(last_year)]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# I don't like the reverse year stuff.\n# I also don't like the list(reversed([ stuff in\n# get_december_meeting_dates,\n# so I am going to move that ugliness to a different function.\n#\n# get_december_meeting_dates() got prettier.\n# Now it has a generator expression.\n#\n# get_formatted_december_meeting_dates() got uglier.\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    for date in iter_date(start_date):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(last_year):\n    return (\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)\n    )\n\ndef get_formatted_december_meeting_dates(last_year):\n    return [\n        format_date(date)\n        for date in list(reversed(list(get_december_meeting_dates(last_year))))\n    ]\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Let's move the list(reversed(list( ugliness\n# out of get_formatted_december_meeting_dates(),\n# to a function that deals with just that ugliness.\n#\n# get_formatted_december_meeting_dates() got prettier.\n# Now it has a generator expression.\n#\n# get_formatted_reversed_december_meeting_dates()\n# has a name that is long and a bit awkward,\n# but I like isolating the ugly reverse order stuff to it.\n# With it doing that one thing, it is simple.\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    for date in iter_date(start_date):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(last_year):\n    return (\n        get_december_meeting_date(year)\n        for year in range(FIRST_MEETING_DATE.year, last_year + 1)\n    )\n\ndef get_formatted_december_meeting_dates(last_year):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(last_year)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    return list(reversed(list(get_formatted_december_meeting_dates(last_year))))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# I dislike the whole approach to iterating over years,\n# so I am going to move the details of that out of\n# get_december_meeting_dates().\n#\n# Golly, get_december_meeting_dates() is very very simple now.\n#\n# get_formatted_december_meeting_dates() got a wee bit simpler.\n#\n# All the stuff I don't like is isolated to\n# get_formatted_reversed_december_meeting_dates().\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    for date in iter_date(start_date):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(years):\n    return (\n        get_december_meeting_date(year)\n        for year in years\n    )\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = range(FIRST_MEETING_DATE.year, last_year + 1)\n    return list(reversed(list(get_formatted_december_meeting_dates(years))))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# I think I can improve\n# get_formatted_reversed_december_meeting_dates()\n# a little bit.\n#\n# I moved the reversed() call to the expression for years.\n# This also eliminated one of the list() calls. Nice.\n#\n# Now even the function that has all the things I don't like\n# is easy to read and understand. Sweet!\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    month = DECEMBER\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    for date in iter_date(start_date):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(years):\n    return (\n        get_december_meeting_date(year)\n        for year in years\n    )\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Oops, the month variable in get_december_meeting_date()\n# is not used, so get rid of it.\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\nDAYS_PER_WEEK = 7\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    for date in iter_date(start_date):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(years):\n    return (\n        get_december_meeting_date(year)\n        for year in years\n    )\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# DAYS_PER_WEEK is not used, so get rid of it.\n# (Don't stop at the one bug.)\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    for date in iter_date(start_date):\n        if date.weekday() == MONDAY:\n            return date\n\ndef get_december_meeting_dates(years):\n    return (\n        get_december_meeting_date(year)\n        for year in years\n    )\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Eliminate the only if statement above.\n# Replace it with functional programming.\n\nimport datetime\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    return list(zip(filter(\n        lambda date: date.weekday() == MONDAY, iter_date(start_date)),\n        range(1)))[0][0]\n\ndef get_december_meeting_dates(years):\n    return (\n        get_december_meeting_date(year)\n        for year in years\n    )\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# The list(zip(iterable, range(1)))[0][0] works,\n# but golly, even while reducing to the absurd,\n# it is very ugly, so I look for something cleaner.\n#\n# I try islice() from itertools.\n# It is only slightly less ugly.\n#\n#     It still has to convert the islice object to a list.\n#     It still has to use a [0] index,\n#     although it has one less than the zip mess.\n\nimport datetime\nfrom itertools import islice\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    start_date = datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE)\n    return list(islice(filter(\n        lambda date: date.weekday() == MONDAY, iter_date(start_date)),\n        1))[0]\n\ndef get_december_meeting_dates(years):\n    return (\n        get_december_meeting_date(year)\n        for year in years\n    )\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Combine the two statements of\n# get_december_meeting_date() to one statement.\n\nimport datetime\nfrom itertools import islice\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_date(year):\n    return list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        iter_date(datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE))),\n        1))[0]\n\ndef get_december_meeting_dates(years):\n    return (\n        get_december_meeting_date(year)\n        for year in years\n    )\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Combine get_december_meeting_date()\n# into get_december_meeting_dates().\n\nimport datetime\nfrom itertools import islice\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_december_meeting_dates(years):\n    return (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        iter_date(datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE))),\n        1))[0]\n        for year in years\n    )\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in get_december_meeting_dates(years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Combine get_december_meeting_dates()\n# into get_formatted_december_meeting_dates().\n\nimport datetime\nfrom itertools import islice\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef format_date(date):\n    return '{0.year}/{0.month}/{0.day}'.format(date)\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        format_date(date)\n        for date in (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        iter_date(datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE))),\n        1))[0]\n        for year in years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Combine format_date()\n# into get_formatted_december_meeting_dates().\n\nimport datetime\nfrom itertools import islice\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        '{0.year}/{0.month}/{0.day}'.format(date)\n        for date in (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        iter_date(datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE))),\n        1))[0]\n        for year in years)\n    )\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    years = reversed(range(FIRST_MEETING_DATE.year, last_year + 1))\n    return list(get_formatted_december_meeting_dates(years))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Combine the two statements of\n# get_formatted_reversed_december_meeting_dates()\n# into one statement.\n\nimport datetime\nfrom itertools import islice\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_formatted_december_meeting_dates(years):\n    return (\n        '{0.year}/{0.month}/{0.day}'.format(date)\n        for date in (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        iter_date(datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE))),\n        1))[0]\n        for year in years))\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    return list(get_formatted_december_meeting_dates(\n        reversed(range(FIRST_MEETING_DATE.year, last_year + 1))))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Combine get_formatted_december_meeting_dates()\n# into get_formatted_reversed_december_meeting_dates().\n\nimport datetime\nfrom itertools import islice\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    while True:\n        yield date;\n        date += increment\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    return list(\n        '{0.year}/{0.month}/{0.day}'.format(date)\n        for date in (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        iter_date(datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE))),\n        1))[0]\n        for year in reversed(range(FIRST_MEETING_DATE.year, last_year + 1))))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Get rid of the loop in iter_date.\n# To do that I reembraced count() from itertools.\n\nimport datetime\nfrom itertools import islice, count\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef iter_date(date, increment=datetime.timedelta(days=1)):\n    return (date + i*increment for i in count())\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    return list(\n        '{0.year}/{0.month}/{0.day}'.format(date)\n        for date in (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        iter_date(datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE))),\n        1))[0]\n        for year in reversed(range(FIRST_MEETING_DATE.year, last_year + 1))))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Combine iter_date() into\n# get_formatted_reversed_december_meeting_dates().\n#\n# This reduces the task to one function with one statement.\n\nimport datetime\nfrom itertools import islice, count\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    return list(\n        '{0.year}/{0.month}/{0.day}'.format(date)\n        for date in (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        (datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE) +\n        i*datetime.timedelta(days=1)\n        for i in count())),\n        1))[0]\n        for year in reversed(range(FIRST_MEETING_DATE.year, last_year + 1))))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# Simplify the date increment.\n\nimport datetime\nfrom itertools import islice, count\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    return list(\n        '{0.year}/{0.month}/{0.day}'.format(date)\n        for date in (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        (datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE) +\n        datetime.timedelta(days=i)\n        for i in count())),\n        1))[0]\n        for year in reversed(range(FIRST_MEETING_DATE.year, last_year + 1))))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

get_ipython().run_cell_magic('script', 'diff_python', "# The time increment we want is simple,\n# and since we will be staying within a month,\n# we can eliminate the datetime.timedelta() stuff.\n\nimport datetime\nfrom itertools import islice, count\n\nFIRST_MEETING_DATE = datetime.date(2009, 9, 28)\n\nN_INVALID_DECEMBER_MEETING_DAYS = 2\nEARLIEST_VALID_DECEMBER_DATE = N_INVALID_DECEMBER_MEETING_DAYS + 1\n\nDECEMBER = 12\nMONDAY = 0  # per date.weekday()\n\ndef get_formatted_reversed_december_meeting_dates(last_year):\n    return list(\n        '{0.year}/{0.month}/{0.day}'.format(date)\n        for date in (\n        list(islice(filter(\n        lambda date: date.weekday() == MONDAY,\n        (datetime.date(year, DECEMBER, EARLIEST_VALID_DECEMBER_DATE + i)\n        for i in count())),\n        1))[0]\n        for year in reversed(range(FIRST_MEETING_DATE.year, last_year + 1))))\n\nthis_year = datetime.date.today().year\nassert (\n    repr(get_formatted_reversed_december_meeting_dates(this_year)) ==\n    open('joe_style_good_output').read())")

todo = '''
    show differences
        visual diff with old cell on left and new cell on right would be fantastic
            but Jupyter notebook does not scroll cells horizontally,
            so that ain't gonna happen
        easy toggling of differences
            (because often, the diffs are distracting clutter)
        colorization of differences
        show differences _between_ the cells
            (right now the diff is shown _after_ the second cell)
        make it Pythonic
            use python instead of bash/sh
            use python difflib instead of unix command line diff
                difflib.ndiff() or difflib.context_diff()
            .splitlines()?
    copy definition into a docstring
        get_december_meeting_dates_for_years(first_year, last_year)
            maybe return comprehension
    do docstrings
    pep8
    Add references to 
        The Elements of Programming Style
        The Practice of Programming
        Brandon Rhodes videos
        Raymond Hettinger videos
    Is it correct to output December 2016 meeting before then?
    Put on github.
    Write intro that this about learning quality through refactoring.
    Summarize
        having to declare MONDAY sucks
'''

