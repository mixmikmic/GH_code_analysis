get_ipython().run_cell_magic('writefile', 'config.json', '{\n    "teams" : {\n        "slack-pack" : {\n            "opt-out" : [\n                {"id" : "U2C5M1L6L"}\n            ]\n        }\n    }\n}')

#######################################
#
# The below need to be populted for bot
# to function
#
#######################################
get_ipython().magic('env SLACK_BOT_TOKEN=#SLACK_BOT_TOCKEN#')

import json

with open("config.json") as f:
    data = json.load(f)
    
    # loop through the teams where k is the team name
    # and v is the dictionary containing opt-out user ids
    for k, v in data["teams"].iteritems():
        print "Accessing team: " + k
        print "Accessing opt-out user_name list: "
        
        # loop through the opt-out list, printing out each 
        # user name
        for ou in v["opt-out"]:
            print ou["user_name"]

get_ipython().run_cell_magic('writefile', 'errors.py', '\nclass UnauthError(Exception):\n    """\n    Exception raised for error encountered for invalid slack credentials/token\n    \n    Attributes:\n        message -- explanation of the error\n    """\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return repr(self.value)')

get_ipython().run_cell_magic('writefile', 'optfilter.py', 'import time\nimport os\nimport json\nimport logging\nfrom errors import *\nfrom slackclient import SlackClient\nfrom logging.handlers import RotatingFileHandler\n\n# create logger\nlogger = logging.getLogger(\'opting_logger\')\nlogger.setLevel(logging.DEBUG)\nLOGFILE = "log/opting"\n\n# create formatter\nformatter = logging.Formatter(\'%(asctime)s - %(levelname)s - %(message)s\')\n\n# create console handler, set level of logging and add formatter\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nch.setFormatter(formatter)\n\n# create file handler, set level of logging and add formatter\nfh = logging.handlers.TimedRotatingFileHandler(LOGFILE, when=\'M\', interval =1)\nfh.setLevel(logging.DEBUG)\nfh.setFormatter(formatter)\nfh.suffix = \'%Y-%m-%d_%H-%M-%S.log\'\n\n# add handlers to logger\nlogger.addHandler(ch)\nlogger.addHandler(fh)\n\nclass OptFilter:\n    """\n    Class for our opting policy implementation\n    """\n    def __init__(self,\n                config_path,\n                team_name,\n                slack_client_token):\n        """\n        Constructor for OptFilter\n        Parameters\n        ----------\n        config_path : str\n            The path to the configuration JSON file for the OptFilter\n        team_name : str\n            The name of the team being filtered\n        slack_client_token : str\n            Token to access slack client for team team_name\n        """\n        \n        # try to open a connection to the Slack API and pull the list of \n        # team members\n        try:\n            logger.info("""Initializing opting filter with parameters:\n            \\tconfig_path : %s\n            \\tteam_name : %s\n            """ % (config_path, team_name))\n            with open(config_path) as f:\n                self.config = json.load(f)\n            self.team_name = team_name\n            self.slack_client = SlackClient(slack_client_token)\n            api_call = self.slack_client.api_call("users.list")\n            if api_call.get(\'ok\'):\n                logger.info("SlackClient successfully connected for OptFilter object.")\n                # retrieve all users so we can find our bot\n                self.team_members = api_call.get(\'members\')\n        except:\n                logger.info("Uh oh, should probably put more robust error handling here!")\n                # quiting if we hit this guy to cut our losses\n                # note that quit() kills the python kernel...\n                quit()\n                \n    def filtered(self,\n                 message):\n        """\n        Function that outputs binary indicator of whether to filter out message\n        \n        Parameters:\n        ----------\n        message : dict\n            Dictionary containing Slack message and message metadata\n        \n        Returns:\n        -------\n        filtered : bool\n            True if message should be filtered from pipeline, false otherwise\n        """\n        if "user" in message:\n            for opt_out_team_member in self.config["teams"][self.team_name]["opt-out"]:\n                if message["user"] == opt_out_team_member["id"]:\n                    logger.debug("Message has been flagged for filtering")\n                    return True            \n        else:\n            logger.debug("Message has NOT been flagged for filtering")\n            return False\n        \n    def opt_out_user(self,\n                     team,\n                     user_name):\n        """\n        Function that introduces a user from a team into the opt-out user group\n        \n        Parameters:\n        ----------\n        team : str\n            Name of the team for opting-out user\n        user_name : str\n            user_name for the opting out user\n        Returns:\n        -------\n        None\n        """\n        logger.info("THIS FUNCTION AINT WRITTEN YET. THANKS FOR PLAYING")\n        \n    def opt_in_user(self,\n                    team,\n                    user_name):\n        """\n        Function that introduces a user from a team into the opt-in user group\n        \n        Parameters:\n        ----------\n        team : str\n            Name of the team for opting-in user\n        user_name : str\n            user_name for the opting in user\n        Returns:\n        -------\n        None\n        """\n        logger.info("THIS FUNCTION AINT WRITTEN YET. THANKS FOR PLAYING")\n\nif __name__ == "__main__":\n    try:\n        f = OptFilter("config.json",\n                      "slack-pack",\n                      os.environ.get(\'SLACK_TOKEN\'))\n        print f.config\n#         token = os.environ.get(\'SLACK_TOKEN\')\n        token = \'poop\'\n        sc = SlackClient(token)\n        if sc.rtm_connect():\n            while True:\n                temp = sc.rtm_read()\n                for item in temp:\n                    if f.filtered(item):\n                        pass\n                    else:\n                        pass\n                time.sleep(1)\n        else:\n            raise UnauthError("Credentials/token invalid")\n    except UnauthError as e:\n        print \'UnauthError:\', e\n        quit()')

