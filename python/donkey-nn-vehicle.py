get_ipython().run_cell_magic('bash', '', "# Create a new part.\ncat > ~/SageMaker/donkey/donkeycar/parts/cnn.py << EOF\nimport keras\nimport donkeycar as dk\n\n\nclass KerasPilot():\n\n    def load(self, model_path):\n        self.model = keras.models.load_model(model_path)\n\n    def shutdown(self):\n        pass\n    \n    def train(self, train_gen, val_gen, \n              saved_model_path, epochs=100, steps=100, train_split=0.8,\n              verbose=1, min_delta=.0005, patience=5, use_early_stop=True):\n\n        save_best = keras.callbacks.ModelCheckpoint(saved_model_path, \n                                                    monitor='val_loss', \n                                                    verbose=verbose, \n                                                    save_best_only=True, \n                                                    mode='min')\n        \n        early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', \n                                                   min_delta=min_delta, \n                                                   patience=patience, \n                                                   verbose=verbose, \n                                                   mode='auto')\n\n        callbacks_list = [save_best]\n\n        if use_early_stop:\n            callbacks_list.append(early_stop)\n        \n        hist = self.model.fit_generator(\n                        train_gen, \n                        steps_per_epoch=steps, \n                        epochs=epochs, \n                        verbose=1, \n                        validation_data=val_gen,\n                        callbacks=callbacks_list, \n                        validation_steps=steps*(1.0 - train_split))\n        return hist\n\n\nclass MyPilot(KerasPilot):\n    def __init__(self, model=None, *args, **kwargs):\n        super(MyPilot, self).__init__(*args, **kwargs)\n        self.model = model if model else default_categorical()\n        \n    def run(self, img_arr):\n        img_arr = img_arr.reshape((1,) + img_arr.shape)\n        angle_binned, throttle = self.model.predict(img_arr)\n        angle_unbinned = dk.utils.linear_unbin(angle_binned)\n        return angle_unbinned, throttle[0][0]\n\n\ndef default_categorical():\n    from keras.layers import Input, Dense, merge\n    from keras.models import Model\n    from keras.layers import Convolution2D, MaxPooling2D, Reshape, BatchNormalization\n    from keras.layers import Activation, Dropout, Flatten, Dense\n    \n    img_in = Input(shape=(120, 160, 3), name='img_in')\n    x = img_in\n    x = Convolution2D(24, (5,5), strides=(2,2), activation='relu')(x)\n    x = Convolution2D(32, (5,5), strides=(2,2), activation='relu')(x)\n    x = Convolution2D(64, (5,5), strides=(2,2), activation='relu')(x)\n    x = Convolution2D(64, (3,3), strides=(2,2), activation='relu')(x)\n    x = Convolution2D(64, (3,3), strides=(1,1), activation='relu')(x)\n\n    x = Flatten(name='flattened')(x)\n    x = Dense(100, activation='relu')(x)\n    x = Dropout(.1)(x)\n    x = Dense(50, activation='relu')(x)\n    x = Dropout(.1)(x)\n    angle_out = Dense(15, activation='softmax', name='angle_out')(x)\n    throttle_out = Dense(1, activation='relu', name='throttle_out')(x)\n    \n    model = Model(inputs=[img_in], outputs=[angle_out, throttle_out])\n    model.compile(optimizer='adam',\n                  loss={'angle_out': 'categorical_crossentropy', \n                        'throttle_out': 'mean_absolute_error'},\n                  loss_weights={'angle_out': 0.9, 'throttle_out': .001})\n\n    return model\n\nEOF")

# Replace the path with path to where you cloned the donkey git 
get_ipython().system('pip install ~/SageMaker/donkey')

get_ipython().run_cell_magic('bash', '', '# Create new Donkey template.\ncat > ~/SageMaker/donkey/donkeycar/templates/robolab.py << EOF\n#!/usr/bin/env python3\n"""\nScripts to train a donkey 2.\n\nUsage:\n    manage.py (train) [--tub=<tub1,tub2,..tubn>]  (--model=<model>)\n\nOptions:\n    -h --help        Show this screen.\n    --tub TUBPATHS   List of paths to tubs. Comma separated. Use quotes to use wildcards. ie "~/tubs/*"\n"""\nimport os\nfrom docopt import docopt\nimport donkeycar as dk\n\nfrom donkeycar.parts.cnn import MyPilot\nfrom donkeycar.parts.datastore import TubGroup\n\n\ndef train(cfg, tub_names, model_name):\n    X_keys = [\'cam/image_array\']\n    y_keys = [\'user/angle\', \'user/throttle\']\n\n    def rt(record):\n        record[\'user/angle\'] = dk.utils.linear_bin(record[\'user/angle\'])\n        return record\n\n    kl = MyPilot()\n    print(\'tub_names\', tub_names)\n    if not tub_names:\n        tub_names = os.path.join(cfg.DATA_PATH, \'*\')\n    tubgroup = TubGroup(tub_names)\n    train_gen, val_gen = tubgroup.get_train_val_gen(X_keys, y_keys, record_transform=rt,\n                                                    batch_size=cfg.BATCH_SIZE,\n                                                    train_frac=cfg.TRAIN_TEST_SPLIT)\n\n    model_path = os.path.expanduser(model_name)\n\n    total_records = len(tubgroup.df)\n    total_train = int(total_records * cfg.TRAIN_TEST_SPLIT)\n    total_val = total_records - total_train\n    print(\'train: %d, validation: %d\' % (total_train, total_val))\n    steps_per_epoch = total_train // cfg.BATCH_SIZE\n    print(\'steps_per_epoch\', steps_per_epoch)\n\n    kl.train(train_gen,\n             val_gen,\n             saved_model_path=model_path,\n             steps=steps_per_epoch,\n             train_split=cfg.TRAIN_TEST_SPLIT,\n             epochs=1) # <------ Run only 1 epoch\n\n\nif __name__ == \'__main__\':\n    args = docopt(__doc__)\n    cfg = dk.load_config()\n    \n    if args[\'train\']:\n        tub = args[\'--tub\']\n        model = args[\'--model\']\n        train(cfg, tub, model)\nEOF')

# Create a new car using the new template
get_ipython().system('[ -d ~/d3 ] && rm -rfv ~/d3')
get_ipython().system('donkey createcar --template robolab --path ~/d3')

get_ipython().run_cell_magic('time', '', "\n!cat manage.py\n\n# Let's try the new car\n%cd ~/d3\n!python manage.py train --tub='../SageMaker/data/tub_8_18-02-09' --model '../SageMaker/models/my-test-model'\n%cd ~/SageMaker")

